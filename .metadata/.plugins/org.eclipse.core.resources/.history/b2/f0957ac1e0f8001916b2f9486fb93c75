package utility;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


import io.restassured.RestAssured;
import io.restassured.authentication.PreemptiveBasicAuthScheme;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.http.ContentType;
import io.restassured.http.Header;
import io.restassured.http.Headers;
import io.restassured.response.Response;
import io.restassured.response.ResponseOptions;
import io.restassured.specification.RequestSpecification;

public class RestAssuredHelper  {

    public static RequestSpecification Request;


    public RestAssuredHelper( ) {
    	utility.Configuration.getConfiguration();
    	
        RequestSpecBuilder builder = new RequestSpecBuilder();
        String uriPattern = Configuration.getConfigurationValue("baseUrl");
        builder.setBaseUri( uriPattern);
        builder.setContentType(ContentType.JSON);           
        Request = RestAssured.given().spec(builder.build());
       
    }
    
   
    public static void GetOpsWithPathParameter(String url, Map<String, String> pathParams) {
        //Act
    	
        Request.pathParams(pathParams);
        try {
            Request.get(new URI(url));
        } catch (URISyntaxException e) {
            e.printStackTrace();
        }
        
    }

    
    
    
    
    public static ResponseOptions<Response> GetOps(String url) {
        //Act
        try {
            return Request.get(new URI(url));
        } catch (URISyntaxException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static ResponseOptions<Response> GetOpsWithToken(String url, String token) {
        //Act
        try {
            Request.header(new Header("Authorization", "Bearer " + token));
            return Request.get(new URI(url));
        } catch (URISyntaxException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static ResponseOptions<Response> PUTOpsWithBodyAndPathParams(String url, Map<String,String> body, Map<String,String> pathParams) {
        Request.pathParams(pathParams);
        Request.body(body);
        return Request.put(url);
    }

    public ResponseOptions<Response> GetOpsQueryParams(String url, String queryParams) {
        try {
            Request.queryParam(queryParams);
            return Request.get(new URI(url));
        } catch (URISyntaxException e) {
            e.printStackTrace();
        }
        return null;
    }
    
    public static ResponseOptions<Response> GetOpsQueryParamsWithMap(String url, Map<String, String> pathParams) {
        try {
            Request.queryParams(pathParams);
            return Request.get(new URI(url));
        } catch (URISyntaxException e) {
            e.printStackTrace();
        }
        return null;
    }
    
    


    public static ResponseOptions<Response> PostOpsWithBody(String url,Object body)   {
    	Request.body(body);
        return Request.post(url);
     }
    
    public static ResponseOptions<Response> PostOpsWithStringBody(String url,Object body, Headers header)  {
    	Request.headers(header);
        Request.body(body);
        return Request.post(url);
    }
    

    
    public static ResponseOptions<Response> PostOpsWithJsonBodyAndHeader(String url,Object body, Map<String, String> header)  {
        Request.body(body);
        return Request.post(url);
    }

    public static ResponseOptions<Response> DeleteOpsWithPathParams(String url,Map<String, String> pathParams)  {
        Request.pathParams(pathParams);
        return Request.delete(url);
    }

   
    
   



}